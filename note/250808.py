"""
[250808]

<알고리즘 라이브 강의>

코드체계 : 문자에 대응되는 숫자를 정한 것
※ 네트워크 발전 이전에는 각 지역 별 사용하는 체계가 달랐고 이는 이후의 정보 공유에 문제가 발생하였고 이를 해결하기 위해 1967년 미국에서 ASCII 문자 인코딩 표준이 제정됨
>> 전 세계의 모든 문자를 컴퓨터가 일관되게 표현하고 처리하는 것이 목적

- 아스키 코드 : 7-bit 인코딩으로 128문자를 표현하며 33개의 출력 불가능한 제어 문자들과 공백을 비롯, 95개의 출력 가능한 문자로 구성
※ 확장 아스키 : 1byte 내의 8-bit를 모두 사용하여 추가적인 문자를 표현할 수 있으나 호환성이 나쁨 (별도의 설계 필요)
    ※ n-bit or nbits : n개의 bit를 표현
    ※ nbit : n번째 bit

- 유니 코드 : 다국어 처리를 위해 탄생한 코드체계로 각국에서 개별적으로 제작되어 수신자가 송신자의 코드체계를 가지고 있지 않으면 문제가 발생
※ 유니 코드 character set : 유니 코드를 저장하는 변수의 크기를 정의, 외부 인코딩을 통해 해석하는 바이트 순서를 결정
    ※ UTF(Unicode Transformation Format)
        - UTF-8 : 주로 웹에서 사용 (8-bit ~ 32-bit)
        - UTF-16 : 주로 윈도우, 자바에서 사용 (16-bit ~ 32-bit)
        - UTF-32 : 주로 유닉스(서버)에서 사용 (32-bit 고정)
    ※ Endian : 다수의 바이트로 이루어진 데이터를 저장하는 방식
        - Big Endian : 상위 바이트(MSB)를 가장 낮은 주소에 저장
        - Little Endian : 하위 바이트(LSB)를 가장 낮은 주소에 저장


String : 문자들이 순서대로 나열된 데이터
- Length Controlled(Based) 문자열 : 문자열의 길이 정보를 함께 저장해서 그 길이만큼 문자 데이터를 읽는 방식으로 자바, 파이썬, 네트워크 패킷에 사용
※ 파이썬의 str class 구조
    - PyObject_HEAD : 모든 python 객체가 상속하는 공통 구조
    - length : 문자열의 길이
    - hash : 문자열의 해시값으로 딕셔너리 키로 쓸 때 사용
    - interned : 같은 문자열을 관리하는 플래그
    - kind : 문자열 인코딩의 크기
    - data(length-based) : 문자열이 저장된 실제 메모리 주소를 가리키는 포인터
※ Python3의 문자열 : 텍스트 데이터의 취급방법이 통일되어 있는 불변 시퀀스 자료형으로 직관적인 연산을 제공
※ Java의 문자열 : 문자열 데이터를 저장 및 처리해주는 클래스 제공

- Delimited 문자열 : 문자열의 끝을 나타내는 특정한 구분자(Delimiter)를 추가하여 문자열을 인식하는 방법으로 C에서 사용
※ C의 문자열 : 문자들의 배열 형태로 구현된 응용 자료형으로 마지막에 끝을 표시하는 널문자(\0) 필요


<실습>


"""