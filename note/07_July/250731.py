"""
[250731]

<Python 라이브 강의>

- 상속 : 부모 클래스의 속성과 메서드를 자식 클래스가 물려받는 것으로 코드의 재사용성과 유지보수성을 높이고 클래스 간의 계층구조를 기반으로 구체적인 클래스를 만듦
    ex) class parents > 상속 > class child(parents)
    
    - 메서드 오버라이딩 : 부모 클래스의 메서드를 동일 이름, 동일 파라미터 구조로 재정의 하는 것으로 부모 클래스의 기능을 유지하면서도 내부 동작을 변화시킴
        ※ 파라미터의 구조 변경은 가능하나 이는 다형성을 위반하므로 권장하지 않음
            ※ 다형성 : 서로 다른 클래스의 객체가 동일한 메서드 호출에 대해 각자의 방식대로 응답하는 능력
            >> 부모 타입으로 객체를 다루는 코드에서 자식 객체에 대한 안전한 사용이 불가 (TypeError 방지)
    ※ 오버로딩 : 하나의 클래스 안에서 서로 다른 타입 혹은 파라미터를 가진 동일한 이름의 다수의 메서드를 정의하는 것 (파이썬은 미지원)

    - 다중 상속 : 둘 이상의 상위 클래스로부터 다수의 속성, 기능을 상속받는 것으로 중복된 속성이나 메서드의 경우, 상속 순서에 의해 결정
        ※ 다이아몬드 문제 : 클래스 B, C가 A에서 상속되고 D가 B와 C를 모두에서 상속될 때 발생하는 모호함
            >> MRO(Method Resolution Order) 내부 알고리즘에 따라 먼저 상속받는(tree구조의 깊이 우선 탐색) 부모 클래스를 우선함
                ex) Class.mro() || Class.__mro__ 로 mro 정보 접근 가능
                >> 신뢰성 있고 확장성 있는 클래스 설계를 위해 부모 클래스들이 한 번씩만 액세스 되는 일관된 호출 순서를 제공하며 이는 재사용성 및 유지보수성 향상으로 이어짐

    - super() 함수 : MRO에 따라 '상위 클래스' 메서드나 속성에 접근할 수 있게 해주는 내장 함수
        ※ 생성자 메서드나 오버라이딩된 메서드에서 부모 클래스의 초기화나 로직을 그대로 활용
        * 단일 상속 : 클래스명 변경 혹은 상속 구조의 변경에 있어도 문제 없이 유지보수성 증가
        * 다중 상속 : 명시적으로 부모 클래스 이름을 작성하지 않아도 부모 메서드를 안전하게 호출할 수 있음
        ※ child class가 parentA, parentB 순으로 상속했을 경우, parentA에서 super()를 사용하면 MRO에 따라 parentB에 접근이 가능


버그 : SW에서 발생하는 오류 혹은 결함 (예상되는 동작과 실 동작 사이의 불일치)
디버깅 : SW에서 발생하는 버그를 찾아내 수정하는 과정
    - print 함수 활용
    - IDE의 breakpoint, 변수 조회 활용
    - python tutor 활용
    - 뇌 컴파일, 눈 디버깅

    - 에러 : 프로그램 실행 중에 발생하는 예외 상황
        * Syntax Error : 프로그램 구문이 올바르지 않은 경우로 실행 자체가 불가능
        * Exception : Syntax Error를 제외한 모든 에러로 실행 중에 발생하는 문제
            ※ 내장 예외 : 예외 상황을 나타내는 예외 클래스
                ex) ZeroDivisionError, FileNotFoundError, TypeError(타입 불일치, 인자 누락 및 초과), NameError, ValueError, IndexError, KeyError, ModuleNotFoundError, ImportError, KeyboardInterrupt, IndentationError...
            - 예외 처리 : 예외 발생 시, 프로그램의 비정상 종료가 아닌 적절한 처리를 위한 방법
                ex) EAFP (try-except 구조) : Easier to Ask for Forgiveness than Permission
                >> 예외 처리를 중심으로 코드를 작성하는 접근 방식 (예외 상황을 예측하기 어려운 경우)
                    try : 예외가 발생할 수 있는 코드 작성
                    except : 예외가 발생했을 때 실행할 코드 작성
                    else : 예외 미발생 시 실행할 코드 작성
                    finally : 예외 발생 여부와 상관없이 항상 실행할 코드 작성
                
                ex) LBYL (if-else 구조) : Look Before You Leap
                >> 실행하기 전에 값(조건) 검사를 중심으로 코드를 작성하는 접근 방식 (예외 상황을 미리 방지하고 싶은 경우)
                

<실습>

다형성 : 자식 클래스의 인스턴스가 있을 때, 해당 인스턴스는 부모 클래스 타입의 인스턴스로 간주할 수 있음
"""