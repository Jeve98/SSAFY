"""
[250730]

<Python 라이브 강의>

※ 절차 지향 프로그래밍과 OOP는 대척점에 있는 개발론이 아님
>> 절차 지향 프로그래밍이 가지는 문제점을 '객체'를 기반으로 해결하고자(상속, 재사용성, 유지보수성) 보완한 것이 OOP

Procedural Programming
: 함수와 로직 중심으로 작성하여 데이터를 순차적으로 처리하는 프로그래밍 패러다임
- 순차적인 명령어 실행
- 데이터와 함수의 분리
>> 데이터의 재사용성 보다 함수 호출의 흐름(결과)가 중요
※ 한계
1. 복잡성 증가
2. 난해한 유지보수 : 코드 수정 시 영향 범위 파악이 난해

Object Oriented Programming
: 데이터와 함수를 묶은 객체를 중심으로 이를 관리하는 프로그래밍 패러다임
>> 객체 간의 협력(메세지)가 중요
※ 자율성 높은 객체(능동적인 객체)의 중요성 대두

- 클래스 : 객체를 만들기 위해 하나의 구조 안에 데이터 및 함수를 정의한 도구 [설계도- blueprint]
    ※ Python Style Guide : 파스칼 케이스(PascalCase) 작성을 권장
    * 속성 (데이터) : 객체의 상태 혹은 데이터
        - class variable : 클래스 공통 변수로 클래스 내부에서 정의되고 모든 인스턴스가 공유함
        - instance variable(self.var) [멤버 변수] : 개별 객체 변수로 생성자 메서드로 초기화
        ※ 클래스 변수와 동일한 이름의 인스턴스 변수가 있을 경우, 인스턴스 변수를 먼저 참조
    
    * 메서드 (함수) : 클래스 내부에 정의된 함수로, 객체의 기능을 정의
        >> 공통 설정값을 바꾸거나 유틸리티성 작업을 할 때는 클래스/스태틱 메소드를, 인스턴스의 상태를 다룰 땐 인스턴스 메소드를 사용
        >> 클래스와 인스턴스는 모든 종류의 메소드를 다 호출 가능하지만, 클래스는 클래스, 스태틱 메소드의 호출을 인스턴스는 인스턴스 메소드 호출을 권장    
        - Instance Method : 인스턴스의 상태를 조작하거나 동작을 수행하기 위한 메서드로 클래스 내부에 정의되는 기본적인 메서드
            ※ 반드시 인스턴스 자신(self)을 첫 번째 인자로 받음
                ※ Python Style Guide : self 대신 다른 이름으로 설정이 가능하나, self 사용을 '강력히' 권장
                ※ self 동작 원리 : 클래스가 메서드를 호출하고 그 인자로 인스턴스를 전송
                ex) [단축형 호출: 객체 지향적 표현] 'string'.upper() > str.upper('string') 

        - Class Method : 클래스 변수를 조작하거나 클래스 레벨의 동작을 수행하기 위한 메서드로 '@classmethod' 데코레이터를 사용하여 정의
            ※ 호출 시, 첫 번째 인자로 클래스(cls)를 전달 받음
                ※ Python Style Guide : cls 대신 다른 이름으로 설정이 가능하나, cls 사용을 '강력히' 권장
        
        - Static Method : 클래스, 인스턴스와 상관없이 독립적으로 동작하는 메서드로 '@staticmethod' 데코레이터를 사용하여 정의
            ※ 클래스에 의해 호출되며 자동으로 전달 받는 인자가 없고 인스턴스나 클래스 변수에 직접 접근하지 않는 도우미 함수의 역할
        
        ※ 데코레이터 : 다른 함수 코드를 유지한 채로 수정하거나 확장하기 위한 함수
        
        ※ Magic Method : 특정 상황에서 자동으로 호출되는 instance method
            * __init__ : 생성자 메서드로 인스턴스 객체가 생성될 때 자동으로 호출되어 인스턴스 변수를 초기화
                ※ Python Style Guide : 초기화 할 것이 없어도 선언하는 것을 권장 (pass 이용)
            * __str__ : 내장함수(print)에 의해 호출되어 객체 출력을 문자열 표현으로 변경
        
- 인스턴스 : 클래스를 기반으로 생성된 객체

객체 : 실제 존재하는 유무형의 존재로 속성과 행동을 가지고 고유성을 띔
> 인스턴스를 생성하면 독립적인 이름 공간을 생성 (인스턴스에 존재하지 않는 변수는 클래스로 올라가 검색)
>> 기능 단위의 모듈화 기준에서 도미노 현상을 일으키지 않기 위해 독립성과 자율성을 제공하며 가독성과 유지보수성, 재사용성을 높임


<실습>

self : 어떤 인스턴스가 생성되었을 때, 그 인스턴스에 대한 참조를 의미
생성자 : 클래스명과 같은 이름으로 호출되는 함수로 클래스를 바탕으로 인스턴스를 실제 메모리에 생성한 후 인스턴스의 주소값을 반환

데코레이터 : 함수를 매개변수로 받아, 기능을 추가한 함수를 반환하는 함수
"""