"""
[250811]

<알고리즘 라이브 강의>

'==' vs 'is'
- '==' : 동일한 값인지를 비교
- 'is' : 동일한 객체(동일한 메모리 주소)인지를 비교
※ C : strcmp() 함수를 통해 문자열의 내용을 비교
※ Java : == 연산자는 객체의 참조를 비교하고(== Python 'is'), equals() 메소드를 통해 내용을 비교

Python's string는 비교 연산자를 통한 유니코드 상 순서 비교가 가능


패턴 매칭 알고리즘 [write - KMP, 보이어]
- BF (O(MN))
- KMP 알고리즘 ((O(M_전처리+N_검색), theta(n)) : 패턴의 각 위치에서 매칭에 실패했을 때 돌아갈 위치를 미리 계산하는 방식으로 이를 위한 전처리가 필요
    >> 일치한 중복된 패턴만큼 검사를 생략하고 비교를 진행
        ex) 'abcdabcef' 에서 'e'에서 불일치 발생 시, 앞선 'abc'와 뒷선 'abc'는 중복되므로 앞선 'abc'에 대한 검사를 생략
    ※ LPS(Longest Prefix which is also Suffix) 배열 (== next, pi 배열)
        : 접두사이자 접미사인 문자열의 최대 길이
        ex) 'abcdabcef' 배열의 LPS 배열 [-1, 0, 0, 0, 0, 1, 2, 3, 0, 0]을 생성하고
        불일치가 발생한 e에 해당하는 값 3을 문자열 배열에서 다시 비교할 위치로 사용
- 보이어_무어 알고리즘 (O(mn), theta(<n) : 상용 sw에서 채택하고 있는 알고리즘으로 실검색에서 매우 빠른 성능을 보임
    ※ Hint) string - 58p
    >> 불일치 문자 휴리스틱 (Bad-Character Heuristic)
        :패턴 오른쪽 끝에 있는 문자가 불일치 하고(역순 확인) 이 문자가 패턴 내에 존재하지 않을 경우, 패턴의 길이만큼 이동하여 비교
         불일치하되 문자가 패턴 내에 존재할 경우, 일치한 부분을 고려하여 이동
        ※ 완전한 보이어_무어 알고리즘 : 일치 접미부 휴리스틱을 함께 사용
- 카프_라빈 알고리즘


문자열 암호화
- 단일 치환 암호화
※ 복호화를 위해 모든 키의 조합이 필요하므로 팩토리얼만큼 시간이 걸리지만, 빈도 분석 공격을 기반으로 빠른 해독이 가능
ex) 시저 암호 : 평문의 알파벳을 일정한 문자 수만큼 평행이동하여 암호화


문자열 압축 (Run-length encoding) : 같은 값이 몇 번 반복되는지를 표현하는 방식
ex) BMP 파일의 압축 방법
- 허프만 코딩 알고리즘 : 자주 나오는 문자는 짧은 코드로 드물게 나오는 문자는 긴 이진 코드를 부여하여 전체 데이터의 평균 비트 수를 최소화시키는 압축 알고리즘


<실습>


"""