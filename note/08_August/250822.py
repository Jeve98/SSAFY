"""
[250822]

<알고리즘 라이브 강의>

Tree : 원소들 간 1:n의 관계를 가지는 비선형, 계층형 자료구조로 한 개 이상의 노드로 이루어진 유한 집합을 의미하며 일부 노드가 재귀적 정의를 만족한다면 이를 sub tree라고 함
※ 노드의 차수 : 노드에 연결된 자식 노드의 수
※ 트리의 차수 : 트리에 있는 노드의 차수 중에서 가장 큰 값
※ 노드의 높이 : 루트에서 노드에 이르는 간선의 수 (노드의 레벨)
※ 트리의 높이 : 트리에 있는 노드의 높이 중에서 가장 큰 값

- Binary Tree : 모든 노드들이 최대 2개의 sub tree(자식 노드)를 갖는 형태의 tree
> 높이 h에서의 전체 최대 노드 개수는 2^(h + 1) - 1개, 최소 노드 개수는 h + 1개
    * Full Binary Tree : 모든 레벨에 노드가 포화상태인 binary tree로 루트 노드를 1번으로 함
        - Complete Binary Tree : Full Binary Tree의 노드 번호 1번부터 n번까지 빈자리가 없는 binary tree로 우선순위 Queue를 구현하는데에 사용
    * Skewed Binary Tree : 높이 h에 대한 최소 개수의 노드를 가지면서 한쪽 방향의 자식 노드만을 가진 binary tree
    * Expression Binary Tree : 수식을 표현하는 binary tree로 연산자는 루트 및 가지 노드에 위치하고 피연산자는 리프 노드에 위치
        > preorder 시, 중위 표기법, postorder 시, 후위 표기법, preorder 시, 전위 표기법으로 출력

- 순회 : tree의 각 노드를 중복되지 않게 체계적으로 방문하는 것
    ※ 부모 기준
    - 전위순회(preorder traversal) - VLR : 부모 > 왼쪽 자식 > 오른쪽 자식
    - 중위순회(inorder traversal) - LVR : 왼쪽 자식 > 부모 > 오른쪽 자식
    - 후위순회(postorder traversal) - LRV : 왼쪽 자식 > 오른쪽 자식 > 부모

- 표현
    - 배열 : binary tree에 각 노드 번호를 레벨 기준으로 순차적으로 부여하므로 full/complete binary tree에 적합하지만 편향 tree에서 메모리 낭비가 크고 삽입, 삭제 시에 크기 변경이 어려움
        > 노드 번호 i를 기준으로, 부모 노드 (i // 2), 왼쪽 자식 (2 * i), 오른쪽 자식 (2 * i + 1)
        > 레벨 n의 노드 시작 번호 (2^n)
        1. 부모 번호를 인덱스로 자식 번호를 저장 (2차원 배열)
            ※ tree를 기준으로 n개의 노드를 가진다면 n-1개의 간선을 가짐
        2. 자식 번호를 인덱스로 부모 번호를 저장 (1차원 배열)
        ※ 부모 찾기(루트/조상)가 함께 필요한 경우가 있을 수도 있으므로 1, 2번을 함께 사용하기도 함 (효율성)
    - Linked List


<실습>

선형구조 : 요소가 1:1로 연결된 자료구조로 index로 접근이 가능
비선형구조 : 요소가 n:m으로 연결된 자료구조
    - graph : n:m으로 연결된 비계층 구조
    - tree : 1:n으로 연결된 계층 구조
"""